"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var express = require("express");
var sequelize_1 = require("./sequelize");
var cors = require('cors');
var app = express();
var bodyParser = require('body-parser');
app.use(cors());
app.use(express.json());
var swaggerJsdoc = require("swagger-jsdoc");
var swaggerUi = require("swagger-ui-express");
sequelize_1.default.authenticate()
    .then(function () {
    console.log('Connexion à la base de données réussie !!');
})
    .catch(function (error) {
    console.error('Erreur de connexion à la base de données :', error);
});
var swaggerOptions = {
    definition: {
        openapi: "3.1.0",
        info: { title: "Todo Rest API" },
        servers: [{ url: "http://localhost:3000" }]
    },
    apis: ["./index.js"],
};
var swaggerDoc = swaggerJsdoc(swaggerOptions);
console.log("swagger doc from annotated js:", swaggerDoc);
app.use('/api-docs', swaggerUi.serve);
app.get('/api-docs', swaggerUi.setup(swaggerDoc));
var currentDate = new Date();
var year = currentDate.getFullYear();
var month = (currentDate.getMonth() + 1).toString().padStart(2, '0');
var day = currentDate.getDate().toString().padStart(2, '0');
var formattedDate = "".concat(year, "-").concat(month, "-").concat(day);
app.get('/api/movies', function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var result, movies, error_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 2, , 3]);
                return [4 /*yield*/, sequelize_1.default.query('SELECT * FROM MOVIE')];
            case 1:
                result = _a.sent();
                movies = result[0];
                res.json(movies);
                return [2 /*return*/];
            case 2:
                error_1 = _a.sent();
                console.error('Erreur lors de la récupération des films :', error_1);
                res.status(500).json({ error: 'Erreur serveur lors de la récupération des films.' });
                return [2 /*return*/];
            case 3: return [2 /*return*/];
        }
    });
}); });
app.get('/api/movies/:id', function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var movieId, result, movies, result2, critics_marks, m, totalMark, error_2;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                movieId = req.params.id;
                _a.label = 1;
            case 1:
                _a.trys.push([1, 4, , 5]);
                return [4 /*yield*/, sequelize_1.default.query('SELECT * FROM movie WHERE movie_id = ' + movieId)];
            case 2:
                result = _a.sent();
                movies = result[0];
                return [4 /*yield*/, sequelize_1.default.query('SELECT critic_mark FROM Critic WHERE movie_id = ' + movieId)];
            case 3:
                result2 = _a.sent();
                critics_marks = result2[0];
                m = critics_marks;
                totalMark = m.reduce(function (sum, critic) { return sum + critic.critic_mark; }, 0);
                movies[0].averageMark = m.length > 0 ? totalMark / m.length : 0;
                res.json(movies);
                return [2 /*return*/];
            case 4:
                error_2 = _a.sent();
                res.status(500).json({ message: 'Erreur lors de la récupération du film', error: error_2.message });
                return [3 /*break*/, 5];
            case 5: return [2 /*return*/];
        }
    });
}); });
app.get('/api/movie-critics/:id', function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var movieId, result, critics, error_3;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                movieId = req.params.id;
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 4]);
                console.log("C'est parti");
                return [4 /*yield*/, sequelize_1.default.query('SELECT *, users.user_pseudo FROM Critic JOIN users ON critic.user_id = users.user_id WHERE movie_id = ' + movieId)];
            case 2:
                result = _a.sent();
                critics = result[0];
                console.log(result);
                res.json(critics);
                return [2 /*return*/];
            case 3:
                error_3 = _a.sent();
                res.status(500).json({ message: 'Erreur lors de la récupération des critiques', error: error_3.message });
                return [3 /*break*/, 4];
            case 4: return [2 /*return*/];
        }
    });
}); });
app.get('/api/get_movie-critic', function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var result, criticIds, error_4;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 2, , 3]);
                return [4 /*yield*/, sequelize_1.default.query("SELECT critic_id FROM Critic WHERE movie_id = ".concat(req.query.movie_id, " and user_id = ").concat(req.query.user_id))];
            case 1:
                result = _a.sent();
                console.log('Résultat de la requête SQL :', result);
                if (result.length > 0 && Array.isArray(result[0]) && result[0].length > 0) {
                    console.log("Retour SQL :", result[0]);
                    criticIds = result[0].map(function (item) { return item.critic_id; });
                    console.log(criticIds);
                    res.status(200).json(criticIds);
                }
                else {
                    res.status(404).json({ message: 'Aucune critique trouvée pour cet utilisateur et ce film.' });
                }
                return [3 /*break*/, 3];
            case 2:
                error_4 = _a.sent();
                console.error('Erreur lors de la récupération des IDs de critique :', error_4);
                res.status(500).json({ error: 'Erreur serveur lors de la récupération des IDs de critique.' });
                return [3 /*break*/, 3];
            case 3: return [2 /*return*/];
        }
    });
}); });
app.get('/getids', function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var result, user, error_5;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 2, , 3]);
                return [4 /*yield*/, sequelize_1.default.query('SELECT user_id FROM users')];
            case 1:
                result = _a.sent();
                user = result[0];
                res.json(user);
                console.log("Le premier éléments : ", user[0], " et le deuxieme element : ", user[1]);
                return [2 /*return*/];
            case 2:
                error_5 = _a.sent();
                console.error('Erreur lors de la récupération des films :', error_5);
                res.status(500).json({ error: 'Erreur serveur lors de la récupération des films.' });
                return [2 /*return*/];
            case 3: return [2 /*return*/];
        }
    });
}); });
app.get('/getnames', function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var result, user, error_6;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 2, , 3]);
                return [4 /*yield*/, sequelize_1.default.query('SELECT user_pseudo FROM users')];
            case 1:
                result = _a.sent();
                user = result[0];
                res.json(user);
                return [2 /*return*/];
            case 2:
                error_6 = _a.sent();
                console.error('Erreur lors de la récupération des films :', error_6);
                res.status(500).json({ error: 'Erreur serveur lors de la récupération des films.' });
                return [2 /*return*/];
            case 3: return [2 /*return*/];
        }
    });
}); });
app.get('/api/movie-critics_byUser_id', function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var user_id, result, critics, error_7;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                console.log("Commencons");
                user_id = req.query.user_id;
                console.log("USER_ID", user_id);
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 4]);
                return [4 /*yield*/, sequelize_1.default.query("SELECT * FROM Critic WHERE user_id = ".concat(user_id))];
            case 2:
                result = _a.sent();
                critics = result[0];
                res.json(critics);
                console.log(res);
                return [2 /*return*/];
            case 3:
                error_7 = _a.sent();
                res.status(500).json({ message: 'Erreur lors de la récupération des critiques', error: error_7.message });
                return [3 /*break*/, 4];
            case 4: return [2 /*return*/];
        }
    });
}); });
app.get('/api/user-critics', function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var result, critics, error_8;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 2, , 3]);
                return [4 /*yield*/, sequelize_1.default.query('SELECT * FROM Critic')];
            case 1:
                result = _a.sent();
                critics = result[0];
                res.json(critics);
                return [2 /*return*/];
            case 2:
                error_8 = _a.sent();
                res.status(500).json({ message: 'Erreur lors de la récupération des critiques', error: error_8.message });
                return [3 /*break*/, 3];
            case 3: return [2 /*return*/];
        }
    });
}); });
app.get('/api/getpassword', function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var username, result, password, error_9;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                username = req.query.username;
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 4]);
                return [4 /*yield*/, sequelize_1.default.query("SELECT user_password FROM users WHERE user_pseudo = :username", {
                        replacements: { username: username },
                    })];
            case 2:
                result = _a.sent();
                console.log('Résultat de la requête SQL :', result);
                if (result.length > 0 && Array.isArray(result[0]) && result[0].length > 0) {
                    password = result[0][0].user_password;
                    res.status(200).json(password);
                }
                else {
                    res.status(404).json({ message: 'Utilisateur non trouvé' });
                }
                return [3 /*break*/, 4];
            case 3:
                error_9 = _a.sent();
                console.error('Erreur lors de la récupération du mot de passe :', error_9);
                res.status(500).json({ error: 'Erreur serveur lors de la récupération du mot de passe.' });
                return [3 /*break*/, 4];
            case 4: return [2 /*return*/];
        }
    });
}); });
app.get('/api/getidbyusername', function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var username, result, id, error_10;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                console.log("Recuperation de l id");
                username = req.query.username;
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 4]);
                return [4 /*yield*/, sequelize_1.default.query("SELECT user_id FROM users WHERE user_pseudo = :username", {
                        replacements: { username: username },
                    })];
            case 2:
                result = _a.sent();
                console.log('Résultat de la requête SQL :', result);
                if (result.length > 0 && Array.isArray(result[0]) && result[0].length > 0) {
                    id = result[0][0].user_id;
                    res.status(200).json(id);
                }
                else {
                    res.status(404).json({ message: 'Utilisateur non trouvé' });
                }
                return [3 /*break*/, 4];
            case 3:
                error_10 = _a.sent();
                console.error('Erreur lors de la récupération de l id :', error_10);
                res.status(500).json({ error: 'Erreur serveur lors de la récupération de l id.' });
                return [3 /*break*/, 4];
            case 4: return [2 /*return*/];
        }
    });
}); });
app.get('/api/movie-critics', function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var result, critics, error_11;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 2, , 3]);
                return [4 /*yield*/, sequelize_1.default.query('SELECT * FROM Critic')];
            case 1:
                result = _a.sent();
                critics = result[0];
                res.json(critics);
                return [2 /*return*/];
            case 2:
                error_11 = _a.sent();
                res.status(500).json({ message: 'Erreur lors de la récupération des critiques', error: error_11.message });
                return [3 /*break*/, 3];
            case 3: return [2 /*return*/];
        }
    });
}); });
app.post('/api/submitMovie', function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var movie, result, error_12, error_13;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 5, , 6]);
                console.log('reçu: ', req.body);
                movie = {
                    movie_title: req.body.title,
                    movie_poster: req.body.poster,
                    movie_description: req.body.description,
                    movie_releasedate: req.body.releaseDate,
                    movie_filmgenre: req.body.filmGenre,
                    movie_duration: req.body.duration,
                    movie_filmdirector: req.body.filmdirector,
                };
                console.log('On va insérer dans la bdd', movie);
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 4]);
                return [4 /*yield*/, sequelize_1.default.query('INSERT INTO movie (movie_title,movie_poster,movie_description,movie_releasedate,movie_filmgenre,movie_duration,movie_filmdirector) VALUES (?,?,?, ?, ?, ?, ?)', {
                        replacements: [
                            movie.movie_title,
                            movie.movie_poster,
                            movie.movie_description,
                            movie.movie_releasedate,
                            movie.movie_filmgenre,
                            movie.movie_duration,
                            movie.movie_filmdirector,
                        ],
                    })];
            case 2:
                result = _a.sent();
                console.log('Insertion réussie');
                return [3 /*break*/, 4];
            case 3:
                error_12 = _a.sent();
                console.error('Erreur lors de l insertion:', error_12);
                return [3 /*break*/, 4];
            case 4: return [3 /*break*/, 6];
            case 5:
                error_13 = _a.sent();
                res.status(500).json({ message: 'Erreur lors du traitement des données', error: error_13.message });
                return [3 /*break*/, 6];
            case 6: return [2 /*return*/];
        }
    });
}); });
app.post('/api/submitcritic', function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var critic, result, error_14, error_15;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                console.log('Route POST submit atteinte');
                _a.label = 1;
            case 1:
                _a.trys.push([1, 6, , 7]);
                console.log('reçu: ', req.body);
                console.log('test important', req.body.movie_id);
                critic = {
                    critic_date: formattedDate,
                    critic_remark: req.body.description,
                    critic_mark: req.body.note,
                    user_id: req.body.user_id,
                    movie_id: req.body.movie_id,
                };
                console.log('On va insérer dans la bdd', critic);
                _a.label = 2;
            case 2:
                _a.trys.push([2, 4, , 5]);
                return [4 /*yield*/, sequelize_1.default.query('INSERT INTO Critic (critic_date, critic_remark, critic_mark, user_id, movie_id) VALUES (?, ?, ?, ?, ?)', {
                        replacements: [
                            critic.critic_date,
                            critic.critic_remark,
                            critic.critic_mark,
                            critic.user_id,
                            critic.movie_id,
                        ],
                    })];
            case 3:
                result = _a.sent();
                console.log('Insertion réussie:', result);
                return [3 /*break*/, 5];
            case 4:
                error_14 = _a.sent();
                console.error('Erreur lors de l insertion:', error_14);
                return [3 /*break*/, 5];
            case 5: return [3 /*break*/, 7];
            case 6:
                error_15 = _a.sent();
                res.status(500).json({ message: 'Erreur lors du traitement des données', error: error_15.message });
                return [3 /*break*/, 7];
            case 7: return [2 /*return*/];
        }
    });
}); });
app.post('/api/adduser', function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var user, result, error_16, error_17;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                console.log('Route POST submit atteinte');
                _a.label = 1;
            case 1:
                _a.trys.push([1, 6, , 7]);
                console.log('reçu: ', req.body);
                console.log('test important', req.body.movie_id);
                user = {
                    user_pseudo: req.body.username,
                    user_email: req.body.email,
                    user_password: req.body.password,
                    user_id: 5,
                    user_role: " ",
                    user_level: 0,
                    user_points: 0
                };
                console.log('On va insérer dans la bdd', user);
                _a.label = 2;
            case 2:
                _a.trys.push([2, 4, , 5]);
                return [4 /*yield*/, sequelize_1.default.query('INSERT INTO users (user_pseudo,user_email,user_password) VALUES ( ?, ?, ?)', {
                        replacements: [
                            user.user_pseudo,
                            user.user_email,
                            user.user_password,
                        ],
                    })];
            case 3:
                result = _a.sent();
                console.log('Insertion réussie:', result);
                return [3 /*break*/, 5];
            case 4:
                error_16 = _a.sent();
                console.error('Erreur lors de l insertion:', error_16);
                return [3 /*break*/, 5];
            case 5: return [3 /*break*/, 7];
            case 6:
                error_17 = _a.sent();
                res.status(500).json({ message: 'Erreur lors du traitement des données', error: error_17.message });
                return [3 /*break*/, 7];
            case 7: return [2 /*return*/];
        }
    });
}); });
app.post('/api/removecritic', function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var result, error_18, error_19;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 5, , 6]);
                console.log('On va supprimer la critique d id:', req.body.critic_id);
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 4]);
                return [4 /*yield*/, sequelize_1.default.query('DELETE from Critic WHERE critic_id = ' + req.body.critic_id)];
            case 2:
                result = _a.sent();
                console.log('Suppression réussie');
                return [3 /*break*/, 4];
            case 3:
                error_18 = _a.sent();
                console.error('Erreur lors de la suppression', error_18);
                return [3 /*break*/, 4];
            case 4: return [3 /*break*/, 6];
            case 5:
                error_19 = _a.sent();
                res.status(500).json({ message: 'Erreur lors du traitement des données', error: error_19.message });
                return [3 /*break*/, 6];
            case 6: return [2 /*return*/];
        }
    });
}); });
app.use(express.json()); // => to parse request body with http header "content-type": "application/json"
app.get('/api/liveness', function (req, res) {
    res.send('OK ca marche !!!');
});
console.log('starting...');
app.listen(3000, function () {
    console.log('Ok, started!');
});
//# sourceMappingURL=app.js.map
var idGenerator = 1;
var userGenerator = 1;
function newId() {
    return idGenerator++;
}
function idUserGenerator() {
    return userGenerator++;
}
//# sourceMappingURL=app.js.map